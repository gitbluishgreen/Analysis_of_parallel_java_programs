//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import java.io.PrintWriter;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
class Pair<T1, T2> {
   public T1 first;
   public T2 second;

   public Pair(T1 a, T2 b) {
      first = a;
      second = b;
   }
}

class FunctionTable {
   Hashtable<String, Set<Integer>> points_to_set = new Hashtable<String, Set<Integer>>();
   HashMap<String,String> types = new HashMap<String,String>();
   boolean is_main_method = false;
   StatementNode entry_block;
   StatementNode exit_block;
}

class StatementNode {
   public static Hashtable<String, FunctionTable> functions;
   public static ArrayList<StatementNode> peg_dfs_order;
   public static Hashtable<Integer, String> abstract_types;
   public static Hashtable<String, Integer> thread_start_ids;// associates each start method on an object with the
                                                             // thread id it creates
   public String label_name;// may be null
   public int parent_thread;// gives the index of the thread that created it. Assume that main has a default
                            // of 0.
   public ArrayList<String> vars;// we can safely skip integer allocation statements.
   public ArrayList<StatementNode> predecessors;
   public ArrayList<StatementNode> successors;
   public Set<StatementNode> mhp_set;
   public Set<StatementNode> out_set;
   public HashMap<String,Set<Integer>> stack;
   public HashMap<Integer,HashMap<String,Integer>> heap;
   public boolean changed;// default is false, to denote whether MHP set changed or not.
   public boolean stack_changed;
   public boolean heap_changed;
   public Set<String> monitor_set;

   public StatementNode() {

   }

   public String toString() {
      return null;
   }

   protected Set<StatementNode> compute_thread_set(int current_thread) {
      Set<StatementNode> res = new HashSet<StatementNode>();
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s.parent_thread == current_thread)
            res.add(s);
      }
      return res;
   }

   public static boolean set_equal(Set<StatementNode> s1, Set<StatementNode> s2) {
      if (s1.size() != s2.size())
         return false;
      for (StatementNode s : s1) {
         if (!s2.contains(s))
            return false;
      }
      return true;
   }

   protected void update_monitor(ArrayList<String> s) {
      for (String s1 : s)
         this.monitor_set.add(s1);
   }

   public void update() {
      // overriden
   }

   public Set<StatementNode> compute_out() {
      // overriden by children.
      return null;
   }

}

class SimpleStatement extends StatementNode {
   public SimpleStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      stack = new HashMap<>();
      heap = new HashMap<>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }
      s1.addAll(mhp_set);
      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("%s = %s", vars.get(0), vars.get(1));
   }
   public void update_stack()
   {
      
   }
   public void update_heap()
   {

   }
}

class AllocationStatement extends StatementNode {
   public AllocationStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }
      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("%s = new %s()", vars.get(0),
            StatementNode.abstract_types.get(Integer.parseInt(vars.get(1))));
   }
}

class FieldWriteStatement extends StatementNode {
   public FieldWriteStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }
      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("%s.%s = %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class FieldReadStatement extends StatementNode {
   public FieldReadStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }
      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("%s = %s.%s", vars.get(0), vars.get(1), vars.get(2));
   }

}

class WhileNodeStatement extends StatementNode {
   public WhileNodeStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("while (%s)", vars.get(0));
   }
}

class IfNodeStatement extends StatementNode {
   public IfNodeStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("if (%s)", vars.get(0));
   }
}

class IfJoinStatement extends StatementNode {
   public IfJoinStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("Join on %s,%s", predecessors.get(0).toString(), predecessors.get(1).toString());
   }

}

class JoinStatement extends StatementNode {
   public JoinStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      String join_object = vars.get(0);
      int thread_id = StatementNode.thread_start_ids.get(join_object);//set of threads to be killed!
      Set<StatementNode> s2 = compute_thread_set(thread_id);
      s1.removeAll(s2);
      return s1;
   }

   public String toString() {
      return String.format("%s.join()", vars.get(0));
   }
}

class EntryStatement extends StatementNode {
   public EntryStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }
      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      String notified_id = this.vars.get(0);
      Set<StatementNode> kill_set = new HashSet<StatementNode>();
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s.monitor_set.contains(notified_id))
            kill_set.add(s);
      }
      s1.removeAll(kill_set);
      return s1;
   }

   public String toString() {
      return String.format("synchronized(%s)", vars.get(0));
   }

}

class ExitStatement extends StatementNode {
   public ExitStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("exit (%s)", vars.get(0));
   }
}

class SystemPrintStatement extends StatementNode {
   public SystemPrintStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("System.out.println(%s)", vars.get(0));
   }
}

class NotifiedEntryStatement extends StatementNode {
   public NotifiedEntryStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      changed = false;
   }

   public void update() {
      StatementNode waiting_pred = this.predecessors.get(0);
      Set<StatementNode> final_set = new HashSet<StatementNode>(mhp_set);
      Set<StatementNode> waiting_pred_set = new HashSet<StatementNode>(waiting_pred.out_set);// out of waiting pred.
      String id = this.vars.get(0);
      Set<StatementNode> union_set = new HashSet<StatementNode>();
      Set<StatementNode> notifyall_set = new HashSet<StatementNode>();
      Set<StatementNode> notify_set = new HashSet<StatementNode>();
      Set<StatementNode> notified_entry_set = new HashSet<StatementNode>();
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s instanceof NotifyStatement) {
            if (s.vars.get(0).equals(id) && s.mhp_set.contains(waiting_pred)) {
               // notifyPred
               notify_set.add(s);
               union_set.addAll(s.out_set);
            }
         } else if (s instanceof NotifyAllStatement) {
            if (s.vars.get(0).equals(id) && s.mhp_set.contains(waiting_pred)) {
               // notifyAllPred
               notifyall_set.add(s);
               union_set.addAll(s.out_set);
            }
         } else if (s instanceof NotifiedEntryStatement && s != this) {
            if (s.vars.get(0).equals(id))
               notified_entry_set.add(s);
         }
      }
      union_set.retainAll(waiting_pred_set);
      Set<StatementNode> gen_set = new HashSet<StatementNode>();
      for (StatementNode m : notified_entry_set) {
         StatementNode pre = m.predecessors.get(0);
         boolean z = pre.mhp_set.contains(waiting_pred);
         Set<StatementNode> s_t = new HashSet<StatementNode>(pre.mhp_set);
         s_t.retainAll(waiting_pred.mhp_set);
         if (!z)
            continue;
         s_t.retainAll(notifyall_set);
         if (s_t.size() > 0)
            gen_set.add(m);
      }
      final_set.addAll(gen_set);
      final_set.addAll(union_set);
      if (!StatementNode.set_equal(final_set, mhp_set)) {
         changed = true;
         mhp_set = final_set;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      String notified_id = this.vars.get(0);
      Set<StatementNode> kill_set = new HashSet<StatementNode>();
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s.monitor_set.contains(notified_id))
            kill_set.add(s);
      }
      s1.removeAll(kill_set);
      return s1;
   }

   public String toString() {
      return String.format("Notified Entry(%s)", vars.get(0));
   }
}

class NotifyAllStatement extends StatementNode {
   public NotifyAllStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      changed = false;
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> kill_set = new HashSet<StatementNode>();
      Set<StatementNode> gen_set = new HashSet<StatementNode>();
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);
      String obj = this.vars.get(0);
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s instanceof WaitingStatement && s.vars.get(0).equals(obj)) {
            kill_set.add(s);
         }
         if (s instanceof NotifiedEntryStatement && s.vars.get(0).equals(obj)
               && mhp_set.contains(s.predecessors.get(0))) {
            gen_set.add(s);
         }
      }
      out_set.addAll(gen_set);
      out_set.removeAll(kill_set);
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s.notifyAll()", vars.get(0));
   }
}

class NotifyStatement extends StatementNode {
   public NotifyStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      changed = false;
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);
      String obj = this.vars.get(0);
      Set<StatementNode> kill_set = new HashSet<StatementNode>();
      Set<StatementNode> gen_set = new HashSet<StatementNode>();
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s instanceof WaitingStatement && s.vars.get(0).equals(obj)) {
            kill_set.add(s);
         }
         if (s instanceof NotifiedEntryStatement && mhp_set.contains(s.predecessors.get(0))) {
            gen_set.add(s);
         }
      }
      if (kill_set.size() > 1)
         kill_set.clear();// empty set
      out_set.addAll(gen_set);
      out_set.removeAll(kill_set);
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s.notify()", vars.get(0));
   }
}

class WaitStatement extends StatementNode {
   public WaitStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
      monitor_set = new HashSet<String>();
      out_set = new HashSet<StatementNode>();
      changed = false;
   }

   public Set<StatementNode> compute_out() {
      return new HashSet<StatementNode>(mhp_set);// kill and gen are empty sets
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s.wait()", vars.get(0));
   }
}

class WaitingStatement extends StatementNode {
   public WaitingStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      monitor_set = new HashSet<String>();
   }

   public Set<StatementNode> compute_out() {
      return new HashSet<StatementNode>(mhp_set);// kill and gen are empty sets
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s.waiting", vars.get(0));
   }
}

class StartStatement extends StatementNode {
   public StatementNode starting_function;

   public StartStatement() {
      starting_function = null;
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      monitor_set = new HashSet<String>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);
      // gen is simply the begin statement. Kill set is empty.
      out_set.add(this.starting_function);
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s.start()(%s)", vars.get(0),starting_function.toString());
   }
}

class BeginStatement extends StatementNode {
   public Set<StatementNode> start_predecessors;

   public BeginStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      start_predecessors = new HashSet<StatementNode>();
      successors = new ArrayList<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      monitor_set = new HashSet<String>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.start_predecessors) {
         new_set.addAll(s.out_set);// take all start predecessors.
      }
      new_set.removeAll(compute_thread_set(this.parent_thread));// remove N(t) as part of
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("begin %s.run", vars.get(0));
   }
}

class EndStatement extends StatementNode {
   public EndStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("end %s.run", vars.get(0));
   }
}

class AndStatement extends StatementNode {
   public AndStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();

   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s && %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class CompareStatement extends StatementNode {
   public CompareStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s < %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class PlusStatement extends StatementNode {
   public PlusStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s + %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class MinusStatement extends StatementNode {
   public MinusStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s - %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class TimesStatement extends StatementNode {
   public TimesStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s * %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class ConstantStatement extends StatementNode {
   public ConstantStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s", vars.get(0), vars.get(1));
   }
}

class NotStatement extends StatementNode {
   public NotStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = !%s", vars.get(0), vars.get(1));
   }
}
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {
      tokenName = n.tokenImage;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> ( Query() )*
    * f3 -> <EOF>
    */
   private PrintWriter pw = new PrintWriter(System.out, true);
   private String tokenName;
   private Hashtable<String, StatementNode> cloned_functions = new Hashtable<String, StatementNode>();
   private FunctionTable function_object;
   private Hashtable<String, FunctionTable> functions = new Hashtable<String, FunctionTable>();
   private StatementNode prev_statement;
   private Hashtable<String, String> program_variables = new Hashtable<String, String>();
   private ArrayList<Pair<String, String>> mhp_queries = new ArrayList<Pair<String, String>>();
   private String label_name;
   private ArrayList<String> id_list = new ArrayList<String>();
   private int abstract_locations = 0;
   private Hashtable<Integer, String> abstract_types = new Hashtable<Integer, String>();
   private int statement_type = -1;
   private int thread_index = 1;// invoked threads!
   private ArrayList<String> monitor_object = new ArrayList<String>();
   private ArrayList<StatementNode> peg_dfs_order = new ArrayList<StatementNode>();// stores PEG in DFS order.
   public void visit(Goal n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> "try"
    * f15 -> "{"
    * f16 -> ( VarDeclaration() )*
    * f17 -> ( QParStatement() )*
    * f18 -> "}"
    * f19 -> "catch"
    * f20 -> "("
    * f21 -> Identifier()
    * f22 -> Identifier()
    * f23 -> ")"
    * f24 -> "{"
    * f25 -> "}"
    * f26 -> "}"
    * f27 -> "}"
    */
   public void visit(MainClass n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      n.f18.accept(this, argu);
      n.f19.accept(this, argu);
      n.f20.accept(this, argu);
      n.f21.accept(this, argu);
      n.f22.accept(this, argu);
      n.f23.accept(this, argu);
      n.f24.accept(this, argu);
      n.f25.accept(this, argu);
      n.f26.accept(this, argu);
      n.f27.accept(this, argu);
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public void visit(TypeDeclaration n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public void visit(ClassDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> "Thread"
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> RunMethodDeclaration()
    * f7 -> "}"
    */
   public void visit(ClassExtendsDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public void visit(VarDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> "public"
    * f1 -> "void"
    * f2 -> "run"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> "{"
    * f6 -> "try"
    * f7 -> "{"
    * f8 -> ( VarDeclaration() )*
    * f9 -> ( QParStatement() )*
    * f10 -> "}"
    * f11 -> "catch"
    * f12 -> "("
    * f13 -> Identifier()
    * f14 -> Identifier()
    * f15 -> ")"
    * f16 -> "{"
    * f17 -> "}"
    * f18 -> "}"
    */
   public void visit(RunMethodDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      n.f18.accept(this, argu);
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public void visit(Type n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "boolean"
    */
   public void visit(BooleanType n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "int"
    */
   public void visit(IntegerType n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public void visit(ArrayType n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> ( Ann() )?
    * f1 -> ( AliasQuery() )*
    * f2 -> Statement()
    */
   public void visit(QParStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> Label()
    * f2 -> <SCOMMENT2>
    */
   public void visit(Ann n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> ":"
    */
   public void visit(Label n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | MessageSend()
    *       | PrintStatement()
    *       | SynchStatement()
    */
   public void visit(Statement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "{"
    * f1 -> ( QParStatement() )*
    * f2 -> "}"
    */
   public void visit(Block n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public void visit(AssignmentStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public void visit(FieldAssignmentStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public void visit(IfStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public void visit(WhileStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   }

   /**
    * f0 -> "synchronized"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public void visit(SynchStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public void visit(PrintStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookUp()
    *       | FieldRead()
    *       | OrdinaryMessageSend()
    *       | PrimaryExpression()
    */
   public void visit(Expression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&&"
    * f2 -> Identifier()
    */
   public void visit(AndExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public void visit(CompareExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public void visit(PlusExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public void visit(MinusExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public void visit(TimesExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public void visit(ArrayLookUp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public void visit(FieldRead n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> callStartMethod()
    *       | callNotifyMethod()
    *       | callNotifyAllMethod()
    *       | callWaitMethod()
    *       | OrdinaryMessageSend()
    *       | callJoinMethod()
    */
   public void visit(MessageSend n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "start"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> ";"
    */
   public void visit(callStartMethod n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "notify"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> ";"
    */
   public void visit(callNotifyMethod n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "notifyAll"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> ";"
    */
   public void visit(callNotifyAllMethod n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "wait"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> ";"
    */
   public void visit(callWaitMethod n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "join"
    * f3 -> "("
    * f4 -> ")"
    * f5 -> ";"
    */
   public void visit(callJoinMethod n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public void visit(OrdinaryMessageSend n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public void visit(ArgList n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public void visit(ArgRest n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public void visit(PrimaryExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "true"
    */
   public void visit(TrueLiteral n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "false"
    */
   public void visit(FalseLiteral n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "this"
    */
   public void visit(ThisExpression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public void visit(AllocationExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public void visit(NotExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> Identifier()
    * f2 -> "mhp?"
    * f3 -> Identifier()
    * f4 -> <SCOMMENT2>
    */
   public void visit(Query n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> Identifier()
    * f2 -> "alias?"
    * f3 -> Identifier()
    * f4 -> <SCOMMENT2>
    */
   public void visit(AliasQuery n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   }

}
